{
    "version": "https://jsonfeed.org/version/1",
    "title": "艾波儿的技术博客",
    "subtitle": "一日为码农，终身撸不停。",
    "icon": "http://abnerpei.github.io/images/favicon.ico",
    "description": "生而翩翩起舞，舞而惊艳乾坤。",
    "home_page_url": "http://abnerpei.github.io",
    "items": [
        {
            "id": "http://abnerpei.github.io/ios/ios_underlying_inquiry/iOS%E5%BA%95%E5%B1%82%E6%8E%A2%E7%A9%B6%E4%B9%8BBlock/",
            "url": "http://abnerpei.github.io/ios/ios_underlying_inquiry/iOS%E5%BA%95%E5%B1%82%E6%8E%A2%E7%A9%B6%E4%B9%8BBlock/",
            "title": "iOS底层探究之block",
            "date_published": "2021-01-17T05:04:10.000Z",
            "content_html": "<ul>\n<li><strong> <code>block</code> </strong> 的原理是怎样的？本质是什么？</li>\n<li><strong> <code>__block</code> </strong> 的作用是什么？有什么使用注意点？</li>\n<li><code>block</code>  的属性修饰符为什么是 <code>copy</code> ？使用 <code>block</code>  有哪些注意点？</li>\n<li><code>block</code>  在修饰 <code>NAMutableArray</code> , 需不需要添加 <strong> <code>__block</code> </strong> ?</li>\n</ul>\n<p>话不多说，直接来看代码，<strong>问：打印结果是什么？</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>以下代码是Objective-C，并不是java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 第①题：局部变量的捕获</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_localVariable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">^</span>block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"局部变量-a的捕获 %d\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    a <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>以下代码是Objective-C，并不是java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 第②题：静态局部变量的捕获</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test_staticLocalVariable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">^</span>block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态局部变量-b的捕获 %d\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    b <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>别急，<strong>一定要自己想想，有了结果再往下继续！</strong></p>\n<ol>\n<li class=\"quiz\">\n<p>第①题的运行结果是 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li class=\"correct\">局部变量 - a 的捕获 10</li>\n<li>局部变量 - a 的捕获 11</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>第②题的运行结果是 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>静态局部变量 - b 的捕获 20</li>\n<li class=\"correct\">静态局部变量 - b 的捕获 40</li>\n</ul>\n</li>\n</ol>\n<p>来到了这一步，你肯定已经有了自己的答案。</p>\n<blockquote>\n<p>如果，你的答案正确✅，恭喜您。<br />\n如果，你的答案错误❌，木关系啦，我们继续。</p>\n</blockquote>\n<p>首先，我们先把 <code>OC</code>  转成 <code>C++</code> ，看看底层是怎么实现的：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>///这里要指到main.m的上一级目录，再在终端执行下面命令</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m -o LocalVarBlock.cpp</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/iOS/ios_underlying_inquiry/Block/001.png\" alt=\"\" title=\"局部变量a的捕获\" /></p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/iOS/ios_underlying_inquiry/Block/002.png\" alt=\"\" title=\"静态局部变量b的捕获\" /></p>\n<p>通过上面的两张截图中的标记处，可以很明显的看出<strong>局部变量 a</strong> 和<strong>静态局部变量 b</strong>，被 block<strong> 捕获的方式完全不同</strong>，前者是<strong>值捕获</strong>，或者是<strong>指针捕获</strong>。</p>\n<p>如果看到这里，你觉得就结束了吗？</p>\n<p>认为结束的小伙伴，请问：<strong>为什么 a 是值捕获而 b 是指针捕获？</strong><br />\n而认为没有结束的小伙伴，咱们继续！</p>\n<p>兄弟们，上代码，<strong>问：打印结果是什么？</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>以下代码是Objective-C，并不是java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 局部变量和静态局部变量的作用域和生存期</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testLocalVarAndStaticLocalVar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/// 定义局部变量 a</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/// 定义静态局部变量 b</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    a <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    b <span class=\"token operator\">+=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\na is %d, b is %d\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">NSString</span> <span class=\"token operator\">*</span> appDelegateClassName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@autoreleasepool</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// Setup code that might create autoreleased objects goes here.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        appDelegateClassName <span class=\"token operator\">=</span> <span class=\"token class-name\">NSStringFromClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">AppDelegate</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n这是第%d次循环\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token function\">testLocalVarAndStaticLocalVar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">UIApplicationMain</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> nil<span class=\"token punctuation\">,</span> appDelegateClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>再说一句：<strong>一定要自己先想想，或者直接敲代码跑一跑！</strong></p>\n</blockquote>\n<p>再来看下问题：<strong>为什么 a 是值捕获而 b 是指针捕获？</strong></p>\n<p>相信通过上面的代码示例，你应该立马知道了为什么了吧？没错，就是<strong>变量的作用域决定了 block 的捕获方式</strong>。</p>\n<p>接下来，结合代码详细分析如下：</p>\n<blockquote>\n<p><strong>个人觉得这里配图更清晰</strong>，所以，请看图：</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/iOS/ios_underlying_inquiry/Block/003.png\" alt=\"\" title=\"局部变量和静态局部变量的作用域和生存期\" /></p>\n<p>既然明白了：<strong>变量的作用域决定了 block 的捕获方式。<strong>上面我们已经测试了</strong>局部变量</strong>和<strong>静态局部变量</strong>的捕获方式，那么<strong>静态全局变量</strong>和<strong>普通全局变量</strong>，block 又是怎么捕获的呢？答案是不是应该很清晰了！</p>\n<blockquote>\n<p>“<strong>指针捕获</strong>”，这也许是你的答案。</p>\n</blockquote>\n<blockquote>\n<p>但，我可以告诉你：<strong>不捕获</strong>！</p>\n</blockquote>\n<p>为什么不捕获呢？</p>\n<blockquote>\n<p><strong>静态全局变量</strong>的作用域：<strong>局限于一个源文件内</strong>，别的源文件你也访问不了呀。<br />\n<strong>普通全局变量</strong>的作用域：<strong>整个源程序。</strong></p>\n</blockquote>\n<p>最后，我们还通过 <code>OC</code>  转成 <code>C++</code> ，看看底层是怎么实现的：</p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/iOS/ios_underlying_inquiry/Block/004.png\" alt=\"6777777\" /></p>\n",
            "tags": [
                "iOS开发",
                "iOS底层探究",
                "iOS",
                "iOS底层探究",
                "Block"
            ]
        },
        {
            "id": "http://abnerpei.github.io/cpp/Gitee+PicGo/",
            "url": "http://abnerpei.github.io/cpp/Gitee+PicGo/",
            "title": "Gitee+PicGo",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<h2 id=\"1-搭建图床\"><a class=\"anchor\" href=\"#1-搭建图床\">#</a> 1、搭建图床</h2>\n<p>1.1 登录你的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20=\"> Gitee</span>，并新建仓库</p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/001.png\" alt=\"\" /></p>\n<p>1.2 填写仓库名、仓库路径、是否开源等信息</p>\n<blockquote>\n<p><strong>注意</strong>：下图的 <strong> <code>4</code> </strong> 和 <strong> <code>5</code> </strong> 必须选中。</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/002.png\" alt=\"\" /></p>\n<p>1.3 创建私人令牌</p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/003.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/004.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/005.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/006.png\" alt=\"\" /></p>\n<p>1.4 复制私人令牌<br />\n<img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/007.png\" alt=\"\" /></p>\n<p>1.5 配置 PicGo，并上传图片</p>\n<blockquote>\n<p>注意点，在下图中有说明，请注意！</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/008.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/009.png\" alt=\"\" /></p>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "http://abnerpei.github.io/ios/%E6%B5%85%E8%AF%BBMJRefresh%E5%90%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%86%E4%B8%AAUIScrollView%E7%9B%91%E5%90%AC%E6%BB%9A%E5%8A%A8%E7%9A%84block%E5%B1%9E%E6%80%A7/",
            "url": "http://abnerpei.github.io/ios/%E6%B5%85%E8%AF%BBMJRefresh%E5%90%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%86%E4%B8%AAUIScrollView%E7%9B%91%E5%90%AC%E6%BB%9A%E5%8A%A8%E7%9A%84block%E5%B1%9E%E6%80%A7/",
            "title": "我后续也会写一篇我自己的解读",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>行高亮</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">参考链接</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 输入 Scan 之后，按下键盘 Alt + “/” 键，Eclipse 下自动补全。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span>nextLine <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>⚠️以下代码是Objective-C，并不是java⚠️</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>panGestureRecognizerStateAction<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NSDictionary</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NSKeyValueChangeKey</span><span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">></span></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>change</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>panGestureRecognizer<span class=\"token punctuation\">.</span>state <span class=\"token operator\">==</span> <span class=\"token class-name\">UIGestureRecognizerStateEnded</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 内容不够一个屏幕时，系统会自动回弹，这时候记得把 pp_lastContentOffsetY 重新设置一下</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>pp_FSB_insetT<span class=\"token operator\">+</span>self<span class=\"token punctuation\">.</span>pp_FSB_contentH <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>pp_h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">[</span>self setupInitializeOffsetY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 超过一个屏幕，这时候下拉，当松开的时候要把 pp_lastContentOffsetY 重新设置一下</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>pp_FSB_offsetY <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>pp_FSB_insetT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">[</span>self setupInitializeOffsetY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://tva3.sinaimg.cn/large/6833939bly1gicis081o9j20zk0m8dmr.jpg\" alt=\"这里是 alt\" title=\"这里是 title\" /></p>\n<h3 id=\"一-前言\"><a class=\"anchor\" href=\"#一-前言\">#</a> 一、前言</h3>\n<blockquote>\n<p>最近在解答<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC80ZWE0MjdiYWIwYWY=\"> [最新版] MJRefresh 解析与详细使用指导</span>和<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83ZjNiODlhMDJjMzg=\"> MJRefresh 实现刷新（使用它的 Block 方法）</span>中简友的提问，浅读了下 **<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NvZGVyTUpMZWUvTUpSZWZyZXNo\">MJRefresh</span>** 的源码 <code>(关于源码解读，网上已有很多，我后续也会写一篇我自己的解读，不过今天要说的是：借鉴别人的思路，做or完善自己的事。):利用KVO在- (void)willMoveToSuperview:(UIView *)newSuperview方法调用时监听scrollView的contentOffset/contentSize和panGestureRecognizer的state属性，然后做对应操作</code> 。</p>\n</blockquote>\n<h3 id=\"二-开发困惑\"><a class=\"anchor\" href=\"#二-开发困惑\">#</a> 二、开发困惑</h3>\n<p>通常，作为 iOS 开发人员，判断 <code>UIScrollView/UITableView/UICollectionView</code>  的滚动情况的事，时有发生。如果每次都去实现 <code>delegate</code>  方法，在我看来，有些麻烦。除了一遍一遍的写代理，还有一种就是建个基类，但是这样基类还是要实现对应的 <code>delegate</code>  方法。</p>\n<h3 id=\"三-解决方法给uiscrollview添加block属性监听滚动\"><a class=\"anchor\" href=\"#三-解决方法给uiscrollview添加block属性监听滚动\">#</a> 三、解决方法：给 UIScrollView 添加 block 属性监听滚动</h3>\n<p><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46bf88baeff844a0bcd09960c6e6fd40~tplv-k3u1fbpfcp-watermark.image\" alt=\"\" /><br />\n<img data-src=\"/assets/MJ_001.gif\" alt=\"\" /></p>\n<blockquote>\n<p>先预览下效果 <code>(上面红色的是手机录屏所致)</code> ：<br />\n<img data-src=\"http://upload-images.jianshu.io/upload_images/402808-294f1f0887cb142c.gif?imageMogr2/auto-orient/strip\" alt=\"效果图\" /></p>\n</blockquote>\n<h3 id=\"四-理清思路\"><a class=\"anchor\" href=\"#四-理清思路\">#</a> 四、理清思路</h3>\n<blockquote>\n<ol>\n<li>新建一个类 <code>PPMJRefreshComponent,类似MJRefresh中的MJRefreshComponent</code> ，用来当做观察者；</li>\n<li>既然 ** <code>PPMJRefreshComponent</code> <strong> 要观察</strong> <code>UIScrollView</code> <strong> 的 <code>contentOffset</code>  以及 <code>panGestureRecognizer</code>  的 <code>state</code> , 那么</strong> <code>PPMJRefreshComponent</code> <strong> 就要关联当前的</strong> <code>UIScrollView</code> <strong>；并且，</strong> <code>UIScrollView</code> <strong> 要拥有一个</strong> <code>PPMJRefreshComponent</code> ** 对象（如下图：）；</li>\n</ol>\n<blockquote>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/402808-a2af00279c2bc5d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"componet和scrollView相互关系\" /></p>\n</blockquote>\n<ol start=\"3\">\n<li><strong> <code>PPMJRefreshComponent</code> <strong> 观察的结果怎么传递给</strong> <code>UIScrollView</code> </strong>？我采用的是 delegate <code>(PPMJRefreshComponentDelegate)</code> , 需要 ** <code>UIScrollView</code> <strong> 对象遵守；</strong>（此处不适用 block 是因为 block 嵌套 block 容易出问题）**</li>\n</ol>\n<blockquote>\n<p><img data-src=\"http://upload-images.jianshu.io/upload_images/402808-cc230f3b76f22255.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"PPMJRefreshComponentDelegate.png\" /></p>\n</blockquote>\n<ol start=\"4\">\n<li><strong> <code>UIScrollView</code> <strong> 对象实现代理，并设置 scrollBlock 的时候触发监听：</strong>(代码如下，注释已写进去)</strong></li>\n</ol>\n</blockquote>\n<pre><code>@implementation UIScrollView (ScrollBlock)\n\n#pragma mark --- PPMJRefreshComponentDelegate\n-(void)scrollViewContentOffsetDidChange:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change&#123;\n     [self contentOffsetBlockAction:change];\n&#125;\n-(void)scrollViewPanStateDidChange:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change&#123;\n    [self panGestureRecognizerStateAction:change];\n&#125;\n\n-(void)contentOffsetBlockAction:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change\n&#123;\n    //这个属性字面理解意思为：正在拖动。实际上是：scrollView是否滚动了，只要不是最开始初始化的时候设置的位置，就为YES。\n    if (!self.isDragging) &#123;\n        return;\n    &#125;\n    //【注意】此处要特别注意，如果设置contentInset的话，要给pp_lastContentOffsetY赋值为insetT的初始值\n    if (!self.pp_lastContentOffsetY) &#123;\n        [self setupInitializeOffsetY];\n    &#125;\n    //获取当前的contentOffsetY\n    CGFloat currentContentOffsetY = self.pp_FSB_offsetY;\n   \n    //如果前后的contentOffsetY值相同，就不做处理\n    CGFloat lastContentOffsetY = [self.pp_lastContentOffsetY floatValue];\n    if (currentContentOffsetY == lastContentOffsetY) &#123;\n        return;\n    &#125;\n\n    //是否是向上滑，初始值为NO\n    BOOL isToUp = NO;\n\n    //向上滑动\n    if (currentContentOffsetY &gt; lastContentOffsetY) &#123;\n        //处理滑动到底部，继续上滑后系统自动反弹而重复调用的情况\n        if (currentContentOffsetY+self.pp_h &gt; self.pp_FSB_contentH) &#123;\n            return;\n        &#125;\n        isToUp = YES;\n        \n    &#125;else&#123;\n        //向下滑动\n        //处理已经最上面了仍然下拉而反弹时，反复调用\n        if (currentContentOffsetY &lt;= self.pp_FSB_insetT) &#123;\n            return;\n        &#125;\n        \n    &#125;\n    \n    //给pp_lastContentOffsetY绑定值\n    objc_setAssociatedObject(self, @selector(pp_lastContentOffsetY), [NSNumber numberWithFloat:currentContentOffsetY], OBJC_ASSOCIATION_RETAIN);\n    \n    //是否超过一个屏幕\n    BOOL isInOneScreen = (self.pp_FSB_insetT+self.pp_FSB_contentH &lt;= self.pp_h);\n    \n    if (self.pp_scrollBlock) &#123;\n        self.pp_scrollBlock(currentContentOffsetY, isToUp,isInOneScreen);\n    &#125;\n\n&#125;\n-(void)panGestureRecognizerStateAction:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change\n&#123;\n    if (self.panGestureRecognizer.state == UIGestureRecognizerStateEnded) &#123;\n        //内容不够一个屏幕时，系统会自动回弹，这时候记得把pp_lastContentOffsetY重新设置一下\n        if (self.pp_FSB_insetT+self.pp_FSB_contentH &lt;= self.pp_h) &#123;\n            [self setupInitializeOffsetY];\n        &#125;else&#123;\n            //超过一个屏幕,这时候下拉，当松开的时候要把pp_lastContentOffsetY重新设置一下\n            if (self.pp_FSB_offsetY &lt; self.pp_FSB_insetT) &#123;\n                [self setupInitializeOffsetY];\n            &#125;\n        &#125;\n    &#125;\n    \n&#125;\n\n#pragma mark --- 初始化contentOffsetY的值\n-(void)setupInitializeOffsetY&#123;\n    CGFloat currentContentOffsetY = -self.pp_FSB_insetT;\n    objc_setAssociatedObject(self, @selector(pp_lastContentOffsetY), [NSNumber numberWithFloat:currentContentOffsetY], OBJC_ASSOCIATION_RETAIN);\n&#125;\n\n-(void)setPp_scrollBlock:(PPUIScrollViewScrollBlock)pp_scrollBlock\n&#123;\n    //在设置scrollBlock的时候，触发监听\n    self.pp_component.delegate = self;\n    objc_setAssociatedObject(self, @selector(pp_scrollBlock), pp_scrollBlock, OBJC_ASSOCIATION_RETAIN);\n&#125;\n-(PPUIScrollViewScrollBlock)pp_scrollBlock\n&#123;\n   return objc_getAssociatedObject(self, _cmd);\n&#125;\n@end\n\n</code></pre>\n<p><strong>针对上面的代码补充说明如下：</strong></p>\n<ol>\n<li>注意 ** <code>component</code> ** 的初识与关联，一定要弄懂为啥我代码中要用 <code>runtime</code>  强制关联；</li>\n<li>注意 ** <code>pp_lastContentOffsetY</code> <strong> 的使用，它是给</strong> UIScrollView** 动态绑定的记录上一次的 contentOffsetY 值的，只有在滑动的时候有效，<strong>最终如果你放外部的话，偏移量还是和 contentOffset.Y 的值一样</strong>。</li>\n<li><code>-(void)contentOffsetBlockAction:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change</code>  这个方法处理滑动情况，但是<strong>开始下拉</strong>和<strong>上拉到底</strong>的两种临街状态时的 ** <code>pp_lastContentOffsetY</code> ** 需要特殊处理，而这个处理就放在 <code>panGestureRecognizer.state == UIGestureRecognizerStateEnded</code>  的时候。</li>\n</ol>\n<p>最后，感谢 **<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NvZGVyTUpMZWUvTUpSZWZyZXNo\">MJRefresh</span>**！</p>\n<blockquote>\n<p><strong>文字无法描述这个过程，当时怎么想，做的时候怎么做，后来又是怎么调整的，说多了，就失去了文章的核心，所以：感兴趣的最好看下代码，有不懂的请问我，尽我之力，一起学习。</strong></p>\n<p><strong>2018-03-08 14:20:40</strong>  <strong>妇女节快乐！<strong>感谢公司的</strong> party</strong>, 此刻<strong>吃着零食喝着饮料</strong>，匆匆结文。</p>\n</blockquote>\n",
            "tags": [
                "iOS开发"
            ]
        },
        {
            "id": "http://abnerpei.github.io/ios/ios-interview/interview/",
            "url": "http://abnerpei.github.io/ios/ios-interview/interview/",
            "title": "iOS-interview",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<h2 id=\"1-搭建图床\"><a class=\"anchor\" href=\"#1-搭建图床\">#</a> 1、搭建图床</h2>\n<p>1.1 登录你的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20=\"> Gitee</span>，并新建仓库</p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/001.png\" alt=\"\" /></p>\n<p>1.2 填写仓库名、仓库路径、是否开源等信息</p>\n<blockquote>\n<p><strong>注意</strong>：下图的 <strong> <code>4</code> </strong> 和 <strong> <code>5</code> </strong> 必须选中。</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/002.png\" alt=\"\" /></p>\n<p>1.3 创建私人令牌</p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/003.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/004.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/005.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/006.png\" alt=\"\" /></p>\n<p>1.4 复制私人令牌<br />\n<img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/007.png\" alt=\"\" /></p>\n<p>1.5 配置 PicGo，并上传图片</p>\n<blockquote>\n<p>注意点，在下图中有说明，请注意！</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/008.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/ppabner/pp_images/raw/master/Courses/courses_gitee_picgo/009.png\" alt=\"\" /></p>\n",
            "tags": [
                "iOS开发",
                "iOS面试"
            ]
        },
        {
            "id": "http://abnerpei.github.io/link-post-without-title/",
            "url": "http://abnerpei.github.io/link-post-without-title/",
            "title": "www.google.com",
            "date_published": "2013-12-24T15:44:13.000Z",
            "content_html": "<p>This is a link post without a title. The title should be the link with or without protocol. Clicking on the link should open <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29tLw==\">Google</span> in a new tab or window.</p>\n",
            "tags": []
        },
        {
            "id": "http://abnerpei.github.io/link-post/",
            "url": "http://abnerpei.github.io/link-post/",
            "title": "Link Post",
            "date_published": "2013-12-24T15:30:04.000Z",
            "content_html": "<p>This is a link post. Clicking on the link should open <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29tLw==\">Google</span> in a new tab or window.</p>\n",
            "tags": []
        }
    ]
}